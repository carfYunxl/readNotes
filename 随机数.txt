以前，我们都是用rand来生成随机数，但rand其实是一个伪随机数，范围0 - 32767.
C++提供了随机数引擎类default_number engines 和随机数分布类random_number distribution类。

1.default_number engines:
default_random_engine e;
   for(unsigned int i = 0;i < 10;++i)
   {
       cout << e( )<< endl;//调用对象e来获得下一个随机数
   }
输出：
16807
282475249
1622650073
984943658
1144108930
470211272
101027544
1457850878
1458777923
2007237709

从输出可以看到，随机数分布的范围很大，因此一般情况下，是不能被我们直接使用的，这也被我们称为原始随机数。

2.获得指定分布范围内的随机数
我们使用一个随机数分布类型的对象：
    uniform_int_distribution<unsigned> u(0,9);//使用一个0-9范围内的分布对象，[0，9]闭合区间
    default_random_engine e;
    for(unsigned int i = 0;i < 10;++i)
    {
        cout << u(e)<< " ";//用该分布对象获取下一个随机数，传递的是引擎e本身，而不是引擎对象的值e( )
    }
输出：
0 1 7 4 5 2 0 6 6 9
而如果是0 - 100：
输出：
0 13 76 46 53 22 4 68 68 94

当然，我们也可以知道该引擎能输出的最大值和最小值：
cout << e.max() << " " << e.min() << endl;
输出：
2147483646    1

但如果反复运行改程序，你会发现，输出值永远都是一样的。即对于给定的随机数发生器，每次运行程序都会返回相同的数值序列。在某些情况下，这一特性
是非常有用的。但更多时候，我们希望它每次运行都不同。通过将随机数引擎和随机数分布对象定义为static可以实现这一功能。
int c1 = 0;//全局变量记录生成随机数的次序
void createRandomNumber()
{
    c1 ++;//每次调用++
    static uniform_int_distribution<unsigned> u(0,9);
    static default_random_engine e;
    cout << "第" << c1 << "次生成随机数:"<< endl;
    for(unsigned int i = 0;i < 10;++i)
    {
        cout << u(e)<< " ";
    }
    cout << endl;

}
int main()
{
    createRandomNumber();
    createRandomNumber();
}

我们将创建随机数写成一个函数，并将随机数引擎和随机数分布写成static，观察输出结果；

第1次生成随机数:
0 1 7 4 5 2 0 6 6 9
第2次生成随机数:
3 5 8 0 0 5 6 0 3 0

此时发现每次生成随机数已经不一样了。但是还有新的问题，一旦我们下次重新运行该程序，发现每次生成的随机数还是跟之前相同。
引入随机数种子 seed 可以彻底解决这个问题：

所谓种子：其实就是一个数值，引擎可以利用它从序列中一个新位置重新开始生成随机数。

设置种子的两种方式：
1.在创建引擎对象时提供种子。
	default_random_engine e(32767);//创建引擎时提供种子 32767
2.调用引擎的 seed 成员。
	default_random_engine e2;
    	e2.seed(32767); //调用对象的seed成员来提供种子

我们通过对比提供种子和不提供种子来观察输出结果：
void Noseed()
{
    default_random_engine e1/*(20)*/;

    default_random_engine e2;
    //e2.seed(200);
    cout << "e1:"<<endl;
    for(unsigned int i = 0;i < 10;++i)
    {
        cout << e1()<< " ";
    }
    cout << endl;
    cout << "e2:"<<endl;
    for(unsigned int i = 0;i < 10;++i)
    {
        cout << e2()<< " ";
    }
    cout << endl;
}
int main()
{
   Noseed()
}
没有种子，输出：
e1:
16807 282475249 1622650073 984943658 1144108930 470211272 101027544 1457850878 1458777923 2007237709
e2:
16807 282475249 1622650073 984943658 1144108930 470211272 101027544 1457850878 1458777923 2007237709

有种子，输出：
void seed()
{
    default_random_engine e1(20);

    default_random_engine e2;
    e2.seed(200);
    cout << "e1:"<<endl;
    for(unsigned int i = 0;i < 10;++i)
    {
        cout << e1()<< " ";
    }
    cout << endl;
    cout << "e2:"<<endl;
    for(unsigned int i = 0;i < 10;++i)
    {
        cout << e2()<< " ";
    }
    cout << endl;
}
int main()
{
   seed();
}
e1:
336140 1354537686 240746755 371520337 1407342130 814290852 2020550880 1239730149 1258271049 1490048534
e2:
3361400 660474978 259983903 1567719723 1188519418 1700457579 878155977 1659883255 1845292255 2015583458

然而选择一个好的种子是困难的，最常用的方式是调用系统函数 time ，它返回一个特定时刻到当前经过了多少秒。函数 time  接收单个指针参数，它指向用于
写入时间的数据结构，如果指针为空，则简单的返回时间：
default_random_engine e( time( 0 ) );

3.对于u(0 - 9)这种随机分布，生成的是均匀分布的随机数，即每个数出现的概率相同。但很多时候，我们也需要不同分布的随机数，如高斯分布等。

生成0 -1 之间的随机浮点数：
int main()
{
    default_random_engine e;
    uniform_real_distribution<double> u(0,1);
    for(unsigned int i = 0;i < 10;++i)
    {
        cout << u(e) << " ";
    }
}
输出：
0.131538 0.45865 0.218959 0.678865 0.934693 0.519416 0.0345721 0.5297 0.00769819 0.0668422

生成高斯分布的随机数 normal_distribution ：
int main()
{
    default_random_engine e(time(0));      //随机数引擎
    normal_distribution< > n(4,1.5);//均值4，标准差1.5

    QVector<unsigned> vals(9);//含有9个元素的vector，默认初始化都为0

    for(unsigned int i = 0;i < 200;++i)
    {
        unsigned v = lround(n(e));//将产生的随机数，舍入到最近的整数

        if(v < (unsigned)vals.size())
            ++vals[v];
    }
    for(unsigned int j = 0;j < (unsigned)vals.size();++j)
    {
        cout << j << ":" << string(vals[j],'*') << endl;
    }
}
输出：
0:****
1:****
2:*************************
3:*************************************
4:********************************************************
5:*************************************
6:**********************
7:**************
8:

生成伯努利分布的随机数 bernoulli_distribution :
string resp;
    default_random_engine e;//e应保持状态，所以在循环外定义
    bernoulli_distribution b;

伯努利分布总是返回一个bool值，其概率是0.5/0.5