一 以一个对象作为令一个对象初值的三种情况：
1.显示初始化
class A{	};

A a;
A aa = a;

2.将对象作为函数的形参

class B{	};

extern void foo(B b);//表示该函数定义在别处，不在当前文件下，让编译器去别处寻找该函数

int main()
{
	B bb;
	foo(bb);
}
**以值传递将该对象传递给函数，本质上传进去的是该对象的副本
**编译器调用拷贝构造函数，将对象以值传递的形式，拷贝给先创建的临时对象，并传给函数

3.将一个对象作为返回值
class C{	};

C foo()
{
	C cc;
	return cc;
}

*********************************************************************************
二 拷贝构造函数的定义形式:
X::X(const X& x);
Y::Y(const Y& y,int = 0...);

**第一个参数是其类类型，其他参数可以提供默认值
**大多数情况下，以上函数传入一个类对象，会调用拷贝构造函数。
**调用拷贝构造函数，本质上编译器创建了一个临时性的类对象

*********************************************************************************
三 类的隐式初始化
以一个类的数据成员作为参数的拷贝构造函数会执行类的隐式初始化：
考虑下面例子：
class example{
public:
	example(const example& ex);//拷贝构造函数，非explicit
private:
	int a;
	string b;
};

**请观察以下调用
int main()
{
	example x( "hello" );//这里对x进行初始化，本该传入一个类对象，却传入了一个 string 参数。
	example y = x;
}
**以上的初始化仍然成功了，编译器