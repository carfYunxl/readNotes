1.类的隐式类型转换
接受一个参数的构造函数，往往会自动进行隐式类型转换。该构造利用此参数值，初始化类中的该成员值，其余参数默认初始化，以此构造出一个新的类成员。
我们可以使用explicit关键字防止这种隐式类型转换。而且，一般情况下，我们都因该这么做，除非有足够的理由，需要这种转换。
class A
{    
private:
    int aa;
public:
    explicit A(  int a );//阻止隐式类型转换
};

2.拷贝构造函数和拷贝赋值运算符
接收一个const 自身引用参数的构造函数称为该类的拷贝构造函数，接受一个const 自身引用参数的=运算符重载称为拷贝赋值运算符；
class B
{
private:
    int bb = 0;
public:
    B( )//默认构造函数
    {
        cout << "default constructor" << endl;
    }
    //explicit B(  int b );        //阻止隐式类型转换
    //拷贝构造函数
    B(const B&rhs ){
        cout << "copy constructor" << endl;
    }
    //拷贝赋值运算符
    B& operator=(const B&rhs)
    {
        cout << "copy assignment" << endl;
    }
};

调用举例：
int main()
{
    B b1;
    B b2(b1);
    b2 = b1;
    B b3 = b1;
}

输出：
default constructor
copy constructor
copy assignment
copy constructor

简记：
如果有个新对象被定义，必然会有一个构造函数被调用；如果没有新对象被定义，就不会有构造函数被调用。

拷贝构造函数是一个尤其重要的例子，因为它定义对象如何以值传递（passed by value）;
看下面的例子，仍然以类B为例，我们定义has这样一个函数，并在main中调用该函数，看B这个类如何构造：
bool has(B b)
{
}
int main()
{
    B b1;
    if(has(b1))
    {

    }
}
输出：
default constructor
copy constructor

创建b1对象时，用到了默认构造函数，很好理解。调用has函数时，用到了B拷贝构造函数，证实了传的确实是b1的一个副本。
passed by value 通常是个坏主意，passed-by-reference-to-const通常更好，特别是对于类这种较大的对象，之后会再详细谈此话题。

3.Now C++特性
*procedural 过程形式
*object-oriented 面向对象
*functional 函数形式
*generic 泛型
*metaprogramming

4.C++主要的次语言
	C
		区块	语句	预处理器	内置数据类型	数组	指针
	object-oriented C++
		类	封装	继承	多态	virtural函数（动态绑定）
	template C++
		泛型编程	template metaprogramming 模板元编程
	STL
		容器	迭代器	算法	函数对象